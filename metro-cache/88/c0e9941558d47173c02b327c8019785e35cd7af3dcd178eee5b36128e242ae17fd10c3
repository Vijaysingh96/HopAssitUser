{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getActiveStateExceptDrawer = getActiveStateExceptDrawer;\n  exports.isActiveRoute = isActiveRoute;\n  exports.getRouteNameByKey = getRouteNameByKey;\n  exports.getActiveState = getActiveState;\n  exports.getParent = getParent;\n  exports.inject = inject;\n  exports.popPrevious = popPrevious;\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/defineProperty\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function getActiveStateExceptDrawer(param) {\n    var state = param;\n\n    if (!state.routes) {\n      return state;\n    }\n\n    if (state.routes[state.index].routeName === 'DrawerOpen') {\n      return getActiveState(state.routes[0]);\n    }\n\n    return getActiveState(state.routes[state.index]);\n  }\n\n  function isActiveRoute(state, routeName) {\n    if (state.routeName === routeName) {\n      return true;\n    }\n\n    if (!state.routes) {\n      return state.routeName === routeName;\n    }\n\n    if (state.routes[state.index].routeName === 'DrawerOpen') {\n      return isActiveRoute(state.routes[0], routeName);\n    }\n\n    return isActiveRoute(state.routes[state.index], routeName);\n  }\n\n  function getRouteNameByKey(state, key) {\n    if (state.key === key) {\n      return state.routeName;\n    }\n\n    if (!state.routes) {\n      return state.routeName;\n    }\n\n    if (state.routes[state.index].key === key) {\n      return state.routes[state.index].routeName;\n    }\n\n    return getRouteNameByKey(state.routes[state.index], key);\n  }\n\n  function getActiveState(param, parent) {\n    var state = param;\n\n    if (!state.routes) {\n      return _objectSpread({}, state, {\n        parent: parent\n      });\n    }\n\n    return getActiveState(state.routes[state.index], _objectSpread({}, state, {\n      parent: parent\n    }));\n  }\n\n  function getParent(state, routeName, parent) {\n    if (state.routeName === routeName) {\n      return parent;\n    }\n\n    if (!state.routes) {\n      return null;\n    }\n\n    for (var i = 0; i < state.routes.length; i += 1) {\n      var res = getParent(state.routes[i], routeName, state);\n\n      if (res) {\n        return res;\n      }\n    }\n\n    return null;\n  }\n\n  function inject(state, key, index, routes) {\n    if (!state.routes) {\n      return state;\n    }\n\n    if (state.key === key) {\n      if (routes) {\n        return _objectSpread({}, state, {\n          routes: routes,\n          index: index\n        });\n      }\n\n      return _objectSpread({}, state, {\n        index: index\n      });\n    }\n\n    return _objectSpread({}, state, {\n      routes: state.routes.map(function (x) {\n        return inject(x, key, index, routes);\n      })\n    });\n  }\n\n  function popPrevious(state, routeName) {\n    var parent = getParent(state, routeName);\n    var key = parent.key,\n        index = parent.index;\n\n    if (index) {\n      var routes = [].concat((0, _toConsumableArray2.default)(parent.routes.slice(0, index - 1)), (0, _toConsumableArray2.default)(parent.routes.slice(index)));\n      var newState = inject(state, key, index - 1, routes);\n      return newState;\n    }\n\n    return state;\n  }\n});","lineCount":141,"map":[[23,0,1,7],[23,11,1,16,"getActiveStateExceptDrawer"],[23,37,1,7],[23,38,1,43,"param"],[23,43,1,7],[23,45,1,50],[24,0,2,2],[24,8,2,8,"state"],[24,13,2,13],[24,16,2,16,"param"],[24,21,2,2],[26,0,3,2],[26,8,3,6],[26,9,3,7,"state"],[26,14,3,12],[26,15,3,13,"routes"],[26,21,3,2],[26,23,3,21],[27,0,4,4],[27,13,4,11,"state"],[27,18,4,4],[28,0,5,3],[30,0,6,2],[30,8,6,6,"state"],[30,13,6,11],[30,14,6,12,"routes"],[30,20,6,6],[30,21,6,19,"state"],[30,26,6,24],[30,27,6,25,"index"],[30,32,6,6],[30,34,6,32,"routeName"],[30,43,6,6],[30,48,6,46],[30,60,6,2],[30,62,6,60],[31,0,7,4],[31,13,7,11,"getActiveState"],[31,27,7,25],[31,28,7,26,"state"],[31,33,7,31],[31,34,7,32,"routes"],[31,40,7,26],[31,41,7,39],[31,42,7,26],[31,43,7,25],[31,44,7,4],[32,0,8,3],[34,0,9,2],[34,11,9,9,"getActiveState"],[34,25,9,23],[34,26,9,24,"state"],[34,31,9,29],[34,32,9,30,"routes"],[34,38,9,24],[34,39,9,37,"state"],[34,44,9,42],[34,45,9,43,"index"],[34,50,9,24],[34,51,9,23],[34,52,9,2],[35,0,10,1],[37,0,12,7],[37,11,12,16,"isActiveRoute"],[37,24,12,7],[37,25,12,30,"state"],[37,30,12,7],[37,32,12,37,"routeName"],[37,41,12,7],[37,43,12,48],[38,0,13,2],[38,8,13,6,"state"],[38,13,13,11],[38,14,13,12,"routeName"],[38,23,13,6],[38,28,13,26,"routeName"],[38,37,13,2],[38,39,13,37],[39,0,14,4],[39,13,14,11],[39,17,14,4],[40,0,15,3],[42,0,16,2],[42,8,16,6],[42,9,16,7,"state"],[42,14,16,12],[42,15,16,13,"routes"],[42,21,16,2],[42,23,16,21],[43,0,17,4],[43,13,17,11,"state"],[43,18,17,16],[43,19,17,17,"routeName"],[43,28,17,11],[43,33,17,31,"routeName"],[43,42,17,4],[44,0,18,3],[46,0,19,2],[46,8,19,6,"state"],[46,13,19,11],[46,14,19,12,"routes"],[46,20,19,6],[46,21,19,19,"state"],[46,26,19,24],[46,27,19,25,"index"],[46,32,19,6],[46,34,19,32,"routeName"],[46,43,19,6],[46,48,19,46],[46,60,19,2],[46,62,19,60],[47,0,20,4],[47,13,20,11,"isActiveRoute"],[47,26,20,24],[47,27,20,25,"state"],[47,32,20,30],[47,33,20,31,"routes"],[47,39,20,25],[47,40,20,38],[47,41,20,25],[47,42,20,24],[47,44,20,42,"routeName"],[47,53,20,24],[47,54,20,4],[48,0,21,3],[50,0,22,2],[50,11,22,9,"isActiveRoute"],[50,24,22,22],[50,25,22,23,"state"],[50,30,22,28],[50,31,22,29,"routes"],[50,37,22,23],[50,38,22,36,"state"],[50,43,22,41],[50,44,22,42,"index"],[50,49,22,23],[50,50,22,22],[50,52,22,50,"routeName"],[50,61,22,22],[50,62,22,2],[51,0,23,1],[53,0,25,7],[53,11,25,16,"getRouteNameByKey"],[53,28,25,7],[53,29,25,34,"state"],[53,34,25,7],[53,36,25,41,"key"],[53,39,25,7],[53,41,25,46],[54,0,26,2],[54,8,26,6,"state"],[54,13,26,11],[54,14,26,12,"key"],[54,17,26,6],[54,22,26,20,"key"],[54,25,26,2],[54,27,26,25],[55,0,27,4],[55,13,27,11,"state"],[55,18,27,16],[55,19,27,17,"routeName"],[55,28,27,4],[56,0,28,3],[58,0,29,2],[58,8,29,6],[58,9,29,7,"state"],[58,14,29,12],[58,15,29,13,"routes"],[58,21,29,2],[58,23,29,21],[59,0,30,4],[59,13,30,11,"state"],[59,18,30,16],[59,19,30,17,"routeName"],[59,28,30,4],[60,0,31,3],[62,0,32,2],[62,8,32,6,"state"],[62,13,32,11],[62,14,32,12,"routes"],[62,20,32,6],[62,21,32,19,"state"],[62,26,32,24],[62,27,32,25,"index"],[62,32,32,6],[62,34,32,32,"key"],[62,37,32,6],[62,42,32,40,"key"],[62,45,32,2],[62,47,32,45],[63,0,33,4],[63,13,33,11,"state"],[63,18,33,16],[63,19,33,17,"routes"],[63,25,33,11],[63,26,33,24,"state"],[63,31,33,29],[63,32,33,30,"index"],[63,37,33,11],[63,39,33,37,"routeName"],[63,48,33,4],[64,0,34,3],[66,0,35,2],[66,11,35,9,"getRouteNameByKey"],[66,28,35,26],[66,29,35,27,"state"],[66,34,35,32],[66,35,35,33,"routes"],[66,41,35,27],[66,42,35,40,"state"],[66,47,35,45],[66,48,35,46,"index"],[66,53,35,27],[66,54,35,26],[66,56,35,54,"key"],[66,59,35,26],[66,60,35,2],[67,0,36,1],[69,0,38,7],[69,11,38,16,"getActiveState"],[69,25,38,7],[69,26,38,31,"param"],[69,31,38,7],[69,33,38,38,"parent"],[69,39,38,7],[69,41,38,46],[70,0,39,2],[70,8,39,8,"state"],[70,13,39,13],[70,16,39,16,"param"],[70,21,39,2],[72,0,40,2],[72,8,40,6],[72,9,40,7,"state"],[72,14,40,12],[72,15,40,13,"routes"],[72,21,40,2],[72,23,40,21],[73,0,41,4],[73,31,41,16,"state"],[73,36,41,4],[74,0,41,23,"parent"],[74,8,41,23,"parent"],[74,14,41,29],[74,16,41,23,"parent"],[75,0,41,4],[76,0,42,3],[78,0,43,2],[78,11,43,9,"getActiveState"],[78,25,43,23],[78,26,43,24,"state"],[78,31,43,29],[78,32,43,30,"routes"],[78,38,43,24],[78,39,43,37,"state"],[78,44,43,42],[78,45,43,43,"index"],[78,50,43,24],[78,51,43,23],[78,71,43,56,"state"],[78,76,43,23],[79,0,43,63,"parent"],[79,6,43,63,"parent"],[79,12,43,69],[79,14,43,63,"parent"],[80,0,43,23],[80,7,43,2],[81,0,44,1],[83,0,46,7],[83,11,46,16,"getParent"],[83,20,46,7],[83,21,46,26,"state"],[83,26,46,7],[83,28,46,33,"routeName"],[83,37,46,7],[83,39,46,44,"parent"],[83,45,46,7],[83,47,46,52],[84,0,47,2],[84,8,47,6,"state"],[84,13,47,11],[84,14,47,12,"routeName"],[84,23,47,6],[84,28,47,26,"routeName"],[84,37,47,2],[84,39,47,37],[85,0,48,4],[85,13,48,11,"parent"],[85,19,48,4],[86,0,49,3],[88,0,50,2],[88,8,50,6],[88,9,50,7,"state"],[88,14,50,12],[88,15,50,13,"routes"],[88,21,50,2],[88,23,50,21],[89,0,51,4],[89,13,51,11],[89,17,51,4],[90,0,52,3],[92,0,53,2],[92,9,53,7],[92,13,53,11,"i"],[92,14,53,12],[92,17,53,15],[92,18,53,2],[92,20,53,18,"i"],[92,21,53,19],[92,24,53,22,"state"],[92,29,53,27],[92,30,53,28,"routes"],[92,36,53,22],[92,37,53,35,"length"],[92,43,53,2],[92,45,53,43,"i"],[92,46,53,44],[92,50,53,48],[92,51,53,2],[92,53,53,51],[93,0,54,4],[93,10,54,10,"res"],[93,13,54,13],[93,16,54,16,"getParent"],[93,25,54,25],[93,26,54,26,"state"],[93,31,54,31],[93,32,54,32,"routes"],[93,38,54,26],[93,39,54,39,"i"],[93,40,54,26],[93,41,54,25],[93,43,54,43,"routeName"],[93,52,54,25],[93,54,54,54,"state"],[93,59,54,25],[93,60,54,4],[95,0,55,4],[95,10,55,8,"res"],[95,13,55,4],[95,15,55,13],[96,0,56,6],[96,15,56,13,"res"],[96,18,56,6],[97,0,57,5],[98,0,58,3],[100,0,59,2],[100,11,59,9],[100,15,59,2],[101,0,60,1],[103,0,62,7],[103,11,62,16,"inject"],[103,17,62,7],[103,18,62,23,"state"],[103,23,62,7],[103,25,62,30,"key"],[103,28,62,7],[103,30,62,35,"index"],[103,35,62,7],[103,37,62,42,"routes"],[103,43,62,7],[103,45,62,50],[104,0,63,2],[104,8,63,6],[104,9,63,7,"state"],[104,14,63,12],[104,15,63,13,"routes"],[104,21,63,2],[104,23,63,21],[105,0,64,4],[105,13,64,11,"state"],[105,18,64,4],[106,0,65,3],[108,0,66,2],[108,8,66,6,"state"],[108,13,66,11],[108,14,66,12,"key"],[108,17,66,6],[108,22,66,20,"key"],[108,25,66,2],[108,27,66,25],[109,0,67,4],[109,10,67,8,"routes"],[109,16,67,4],[109,18,67,16],[110,0,68,6],[110,33,68,18,"state"],[110,38,68,6],[111,0,68,25,"routes"],[111,10,68,25,"routes"],[111,16,68,31],[111,18,68,25,"routes"],[111,24,68,6],[112,0,68,33,"index"],[112,10,68,33,"index"],[112,15,68,38],[112,17,68,33,"index"],[113,0,68,6],[114,0,69,5],[116,0,70,4],[116,31,70,16,"state"],[116,36,70,4],[117,0,70,23,"index"],[117,8,70,23,"index"],[117,13,70,28],[117,15,70,23,"index"],[118,0,70,4],[119,0,71,3],[121,0,72,2],[121,29,72,14,"state"],[121,34,72,2],[122,0,72,21,"routes"],[122,6,72,21,"routes"],[122,12,72,27],[122,14,72,29,"state"],[122,19,72,34],[122,20,72,35,"routes"],[122,26,72,29],[122,27,72,42,"map"],[122,30,72,29],[122,31,72,46],[122,41,72,46,"x"],[122,42,72,47],[123,0,72,47],[123,15,72,51,"inject"],[123,21,72,57],[123,22,72,58,"x"],[123,23,72,57],[123,25,72,61,"key"],[123,28,72,57],[123,30,72,66,"index"],[123,35,72,57],[123,37,72,73,"routes"],[123,43,72,57],[123,44,72,47],[124,0,72,47],[124,7,72,29],[125,0,72,2],[126,0,73,1],[128,0,75,7],[128,11,75,16,"popPrevious"],[128,22,75,7],[128,23,75,28,"state"],[128,28,75,7],[128,30,75,35,"routeName"],[128,39,75,7],[128,41,75,46],[129,0,76,2],[129,8,76,8,"parent"],[129,14,76,14],[129,17,76,17,"getParent"],[129,26,76,26],[129,27,76,27,"state"],[129,32,76,26],[129,34,76,34,"routeName"],[129,43,76,26],[129,44,76,2],[130,0,75,46],[130,8,78,10,"key"],[130,11,75,46],[130,14,78,25,"parent"],[130,20,75,46],[130,21,78,10,"key"],[130,24,75,46],[131,0,75,46],[131,8,78,15,"index"],[131,13,75,46],[131,16,78,25,"parent"],[131,22,75,46],[131,23,78,15,"index"],[131,28,75,46],[133,0,79,2],[133,8,79,6,"index"],[133,13,79,2],[133,15,79,13],[134,0,80,4],[134,10,80,10,"routes"],[134,16,80,16],[134,62,80,23,"parent"],[134,68,80,29],[134,69,80,30,"routes"],[134,75,80,23],[134,76,80,37,"slice"],[134,81,80,23],[134,82,80,43],[134,83,80,23],[134,85,80,46,"index"],[134,90,80,51],[134,93,80,54],[134,94,80,23],[134,95,80,16],[134,131,80,61,"parent"],[134,137,80,67],[134,138,80,68,"routes"],[134,144,80,61],[134,145,80,75,"slice"],[134,150,80,61],[134,151,80,81,"index"],[134,156,80,61],[134,157,80,16],[134,159,80,4],[135,0,81,4],[135,10,81,10,"newState"],[135,18,81,18],[135,21,81,21,"inject"],[135,27,81,27],[135,28,81,28,"state"],[135,33,81,27],[135,35,81,35,"key"],[135,38,81,27],[135,40,81,40,"index"],[135,45,81,45],[135,48,81,48],[135,49,81,27],[135,51,81,51,"routes"],[135,57,81,27],[135,58,81,4],[136,0,82,4],[136,13,82,11,"newState"],[136,21,82,4],[137,0,83,3],[139,0,84,2],[139,11,84,9,"state"],[139,16,84,2],[140,0,85,1]],"functionMap":{"names":["<global>","getActiveStateExceptDrawer","isActiveRoute","getRouteNameByKey","getActiveState","getParent","inject","state.routes.map$argument_0","popPrevious"],"mappings":"AAA,OC;CDS;OEE;CFW;OGE;CHW;OIE;CJM;OKE;CLc;OME;8CCU,kCD;CNC;OQE;CRU"}},"type":"js/module"}]}